#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <stdio.h>
// stdio.h는 클래스가 아닌 헤더파일 단독으로 존재하는 코드로써
// 헤더파일 안에 선언과 정의가 모두 포함 된 파일로
// 클래스가 아니다. 그래서 c언어에서도 사용할수 있다.

#include "CMyClass.h"
#include "CPlayer.h"
// 작성한 클래스는 include를 통해서 다른 코드로 가져와서 사용할 수 있으며
// 이 경우 <>꺾쇠가 아닌 ""큰따옴표로 가져온다.

// 꺾쇠를 통해서 가져오는 헤더파일은 솔루션 탐색기 내에서 보이지 않는 파일
// 큰따옴표를 통해 가져오는 해더파일은 솔류션 탐색기 내에서 보이는 파일

// 클래스라는 개념은 C++에서 만들어진 것이기 때문에 C언어에서는 사용할수없다.

struct myStruct 
{
	int i;
	float fary[5];

	int j = 10;
	// 구조체 내에서 변수의 정의와 동시에 초기화 할 수 없다.
	// C++에서는 가능하지만 권장사항은 아님.
	// C에서는 아예 사용이 불가능하다.
};


int main()
{
	int ary[5] = { 10,20,30,40,50 };
	// 배열의 index는 0번부터 시작한다.

	ary[0] = 500;

	// ary[5] = 100; (X)
	// 배열은 입력한 숫자 -1까지만 index를 사용할수 있다.

	ary[2] = ary[0] + ary[1];
	// 배열끼리는 서로 대입 및 연산이 가능하다.

	ary[0] = ary[0] * ary[0];	
	// 자기 자신을 계산식에 사용하고
	// 계산의 결과를 다시 자기자신에게 대입할 수 있다.

	//===============================================

	struct myStruct me;
	// 정의된 구조체를 생성하여 사용할때는 어떤 구조체를 만들지 구조체명과 
	// 그렇게 만들어진 구조체 객체의 이름(변수명)을 선언한다.

	me.i = 1000;

	me.fary[0] = 1;

	CMyClass cClass;
	// 클래스는 구조체와 마찬가지로 만들려는 객체(변수)의 자료형(클래스형)을 선언하고
	// 해당 객체(변수)의 이름을 선언하면 생성된다.

	CMyClass cClass2;

	cClass.x = 50;
	// 클래스 내에서 만들어진 변수에 접근하려면
	// 해당 클래스(CMyClass)로 만들어진 변수(cClass)를 통해서 접근한다.

	cClass.printX(10);
	// 클래스 내에서 만들어진 함수 역시 변수와 마찬가지로 변수 객체를 통해서 접근한다.

	cClass.printX(777);

	cClass2.printX(111);
	cClass2.printX(222);

	// 클래스는 변수를 생성하기위한 설계도와 같으며 설계도를 통해 만들어진 결과물(변수)는
	// 몇개를 만들든 만들수 있고, 만들어진 결과물은 각각 독립되어 있기때문에
	// 다른 결과물에 영향을 끼치지 않는다.

	// 결과물 하나의 데이터가 변경된다고 해서 다른 결과물의 데이터가 바뀌지 않으며
	// 설계도인 클래스의 데이터가 바뀌지도 않는다.

	// CMyClass.x = 10000; (X)
	// 클래스는 설계도이기 때문에
	// 외부에서 클래스를 수정할 수 없다.
	// 클래스를 수정하기 위해선 해당 클래스파일을 직접 열어서
	// 편집하는 수 밖에 없으며
	// 일반 변수를 사용하듯이 클래스, 변수를 통해 클래스에서 만들어진 변수값을 직접 바꿀수없다.
	// 오직 클래스를 기반으로 만들어진 변수(객체)의 결과물을 수정하는 것은 가능하다.

	

	return 0;
}